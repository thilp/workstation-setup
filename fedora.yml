# This is an Ansible playbook.
# Run it with: ansible-playbook -K <THIS-FILE>
- hosts: localhost
  vars:
    home: "{{ ansible_env.HOME }}"
  tasks:
    - name: Upgrade all packages
      become: true
      tags: [sudo]
      dnf:
        name: "*"
        state: latest
    - name: Setup hostname
      vars:
        desired_hostname: zal
        hostname_path: /etc/hostname
      when: ansible_env.HOSTNAME != desired_hostname
      block:
        - hostname:
            name: "{{desired_hostname}}"
          become: true
          tags: [sudo]
        - shell: "echo {{desired_hostname}} >{{hostname_path}}"
          when: lookup('file', hostname_path) != desired_hostname
          become: true
          tags: [sudo]
    - name: Install basic tooling
      become: true
      tags: [sudo]
      package:
        state: present
        name:
          - asciinema
          - chrome-gnome-shell
          - colordiff
          - dnf-plugins-core
          - fish
          - fzf
          - gnome-tweaks
          - gparted
          - htop
          - jq
          - most
          - ripgrep
          - ruby-devel
          - tmux
          - tokei
          - units
          - xclip
          - yamllint
          - levien-inconsolata-fonts
    - name: Install Vim
      become: true
      tags: [sudo]
      package:
        state: present
        name:
          - vim
          - ShellCheck
    - name: Python
      tags:
        - python
      block:
        - name: Install Python
          become: true
          tags: [sudo]
          package:
            state: present
            name:
              - python3
              - autoconf
              - bzip2
              - bzip2-devel
              - libffi-devel
              - libtool
              - lldb
              - python-lldb
              - python-devel
              - python3-devel
              - python3-pip
              - readline
              - readline-devel
              - sqlite-devel
              - zlib-devel
        - name: Install Pyenv
          git:
            repo: https://github.com/pyenv/pyenv.git
            dest: "{{home}}/.pyenv"
        - name: Install Pipenv
          pip:
            name: pipenv
            extra_args: --user --upgrade
        - name: Poetry
          tags:
            - poetry
          vars:
            installer: /tmp/get-poetry.py
          block:
            - name: Download the Poetry installer
              when: installer is not exists
              get_url:
                url: https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py
                dest: "{{installer}}"
            - name: Run the Poetry installer
              command: "python3 {{installer}}"
              register: poetry_install
              changed_when: "'already installed' not in poetry_install.stdout"
        - name: Install IPython
          pip:
            name: ipython
            virtualenv: "{{home}}/.virtualenvs/ipython"
            virtualenv_site_packages: yes
    - name: Install Java
      become: true
      tags: [sudo]
      package:
        state: present
        name:
          - java-openjdk
          - java-openjdk-devel
          - java-openjdk-src
          - java-openjdk-javadoc
    - name: VSCode
      block:
        - name: Install the VSCode repository
          become: true
          tags: [sudo]
          yum_repository:
            name: vscode
            description: Visual Studio Code
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: yes
            gpgcheck: yes
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc
        - name: Install VSCode
          become: true
          tags: [sudo]
          package:
            state: present
            name: code
    - name: Docker
      tags:
        - docker
      block:
        - name: Ask whether Docker is already installed
          command: which docker
          register: which_docker
          changed_when: false
          failed_when: false
        - when: which_docker.rc != 0
          block:
            - name: Download & install Docker
              become: true
              tags: [sudo]
              shell: curl -fsSL get.docker.com | CHANNEL=test sh
            - name: Add me in the docker group
              become: true
              tags: [sudo]
              user:
                name: "{{ lookup('env', 'USER') }}"
                groups: [docker]
                append: yes
            - name: Enable & start Docker with systemd
              become: true
              tags: [sudo]
              systemd:
                name: docker
                state: started
                enabled: yes
    - name: Jetbrains IDEs
      tags:
        - jetbrains
      block:
        - name: Increase inotify watch limit
          become: true
          tags: [sudo]
          sysctl:
            name: fs.inotify.max_user_watches
            value: 524288
            sysctl_file: /etc/sysctl.d/jetbrains.conf
            reload: yes
        - vars:
            tb_exe: "{{home}}/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox"
            archive_path: /tmp/jetbrains_toolbox.tar.gz
            extracted_path: /tmp/jetbrains_toolbox
          when: tb_exe is not exists
          block:
            - name: Download Jetbrains Toolbox
              vars:
                tb_json: "{{ lookup('url', 'https://data.services.jetbrains.com/products/releases?code=TBA&latest=true&type=release') | from_json }}"
                tb_url: "{{ tb_json | json_query('TBA[0].downloads.linux.link') }}"
                tb_checksum_url: "{{ tb_json | json_query('TBA[0].downloads.linux.checksumLink') }}"
              get_url:
                url: "{{ tb_url }}"
                checksum: "sha256:{{ tb_checksum_url }}"
                dest: "{{ archive_path }}"
            - name: Install Jetbrains Toolbox
              unarchive:
                remote_src: yes
                src: "{{ archive_path }}"
                dest: "{{ extracted_path }}"
            - name: Locate the Jetbrains Toolbox executable
              find:
                paths: "{{ extracted_path }}"
                patterns: jetbrains-toolbox
                recurse: yes
              register: find_toolbox
            - name: Execute the Jetbrains Toolbox executable for the user
              command: "{{ find_toolbox.files[0].path }} "
            - debug:
                msg: The toolbox should be open. If not, try opening it
                      manually at {{ find_toolbox.files[0].path }}.
                      Waiting until {{ tb_exe }} has been created ...
            - wait_for:
                path: "{{ tb_exe }}"
                msg: Timeout while waiting for {{ tb_exe }}. Please install manually.
    - name: Haskell
      tags:
        - haskell
        - languages
      block:
        - name: Stack
          vars:
            stack_installer_path: /tmp/stack.sh
          block:
            - name: Check whether stack is already installed
              command: which stack
              changed_when: false
              failed_when: false
              register: which_stack
            - name: Upgrade the stack installer
              when: which_stack.rc == 0
              command: stack upgrade
              register: stack_upgrade
              changed_when: "'already running the most recent version' not in stack_upgrade.stderr"
            - when: which_stack.rc != 0
              block:
                - name: Download the stack installer
                  when: stack_path is not exists
                  get_url:
                    url: https://get.haskellstack.org/
                    dest: "{{stack_installer_path}}"
                    mode: a+rx
                - name: Execute the stack installer
                  command: "{{stack_installer_path}}"
        - name: Haskell Language Server
          vars:
            path: "{{home}}/git/misc/haskell-ide-engine"
          block:
            - name: Clone HIE if not already cloned
              when: path is not exists
              git:
                repo: https://github.com/haskell/haskell-ide-engine
                dest: "{{path}}"
                recursive: yes
            - name: Install libraries required by HIE
              tags: [sudo]
              become: true
              package:
                state: present
                name:
                  - libicu-devel
                  - ncurses-devel
            - name: Build HIE
              command: make hie-8.6.3
              args:
                chdir: "{{path}}"
            - name: Build Haskell docs for displaying with HIE
              command: make build-doc-8.6.3
              args:
                chdir: "{{path}}"
    - name: Rust
      tags:
        - rust
        - languages
      vars:
        rustup_path: /tmp/rustup.sh
      block:
        - name: Download the rustup installer
          when: rustup_path is not exists
          get_url:
            url: https://sh.rustup.rs
            dest: "{{ rustup_path }}"
            mode: a+rx
        - name: Execute the rustup installer
          # Available toolchains: stable, beta, nightly, none
          shell: "{{ rustup_path }} --default-toolchain nightly -y"
    - name: Golang
      tags:
        - go
        - golang
        - languages
      vars:
        version: 1.12
        goroot: "{{home}}/.golang"
        dl_url: "https://dl.google.com/go/go{{version}}.linux-amd64.tar.gz"
        tmp_archive: /tmp/golang.tar.gz
        tmp_dir: /tmp/golang
      when: ( goroot is not exists ) or
              ( lookup('file', goroot ~ "/VERSION") != "go" ~ version )
      block:
        - name: Download the latest Golang archive
          when: tmp_archive is not exists
          get_url:
            url: "{{dl_url}}"
            dest: "{{tmp_archive}}"
            checksum: "sha256:{{ lookup('url', dl_url ~ '.sha256') }}"
        - name: Create temporary directory for extraction of the Golang archive
          tempfile:
            state: directory
            suffix: golang
          register: tmp_dir
        - name: Extract the latest Golang archive into the temporary directory
          unarchive:
            remote_src: yes
            src: "{{tmp_archive}}"
            dest: "{{ tmp_dir.path }}"
        - name: Remove the existing $GOROOT
          file:
            path: "{{goroot}}"
            state: absent
        - name: Populate $GOROOT
          command: "mv {{ tmp_dir.path }}/go {{goroot}}"
    - name: dep
      tags:
        - go
        - golang
      vars:
        installer_path: /tmp/dep-install.sh
      block:
        - name: Download the dep installer
          when: installer_path is not exists
          get_url:
            url: https://raw.githubusercontent.com/golang/dep/master/install.sh
            dest: "{{ installer_path }}"
            mode: a+rx
        - name: Execute the dep installer
          shell: "{{ installer_path }}"
    - name: staticcheck
      tags:
        - go
        - golang
        - linter
      vars:
        version: "2019.1"
        final_path: "{{ home }}/go/bin/staticcheck"
        url: "https://github.com/dominikh/go-tools/releases/download/{{ version }}/staticcheck_linux_amd64"
      get_url:
        url: "{{ url}}"
        dest: "{{ final_path }}"
        mode: a+rx
        checksum: "sha256:{{ url }}.sha256"

    - name: Install self-contained binaries
      when: item.exe is not exists
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.exe }}"
        mode: a+rx
      with_items:
        - exe: /usr/local/bin/youtube-dl
          url: https://yt-dl.org/downloads/latest/youtube-dl
        - exe: /usr/local/bin/diff-so-fancy
          url: https://raw.githubusercontent.com/so-fancy/diff-so-fancy/master/third_party/build_fatpack/diff-so-fancy
    - name: Vivaldi
      become: true
      tags: [sudo]
      block:
        - name: Install the Vivaldi repository
          yum_repository:
            name: vivaldi
            description: The Vivaldi Web Browser
            enabled: yes
            baseurl: https://repo.vivaldi.com/archive/rpm/$basearch
            gpgcheck: yes
            gpgkey: https://repo.vivaldi.com/archive/linux_signing_key.pub
        - name: Install the Vivaldi package
          package:
            name: vivaldi-stable
            state: present
    - name: char command
      vars:
        repo: "{{home}}/git/unicli"
        fish_func_dir: "{{home}}/.config/fish/functions"
        func_file: char.fish
      when: repo is exists
      block:
        - name: Create ~/.unicode.data
          command: fish make.fish
          args:
            chdir: "{{repo}}"
            creates: "{{home}}/.unicode.data"
        - name: Install the char function in Fish
          command: "cp {{func_file}} {{fish_func_dir}}"
          args:
            chdir: "{{repo}}"
            creates: "{{fish_func_dir}}/{{func_file}}"
    - name: STUPS tooling
      tags:
        - stups
        - zalando
      pip:
        name:
          - stups
          - stups-zign
        extra_args: --user --upgrade
    - name: Clojure
      tags:
        - clojure
        - languages
      vars:
        path: "{{ home }}/bin/lein"
      block:
        - name: Leiningen
          get_url:
            url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
            dest: "{{ path }}"
            mode: a+x
